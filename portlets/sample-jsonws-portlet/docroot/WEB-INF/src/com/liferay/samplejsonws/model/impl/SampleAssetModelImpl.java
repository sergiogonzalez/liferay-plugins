/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.samplejsonws.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.samplejsonws.model.SampleAsset;
import com.liferay.samplejsonws.model.SampleAssetModel;
import com.liferay.samplejsonws.model.SampleAssetSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the SampleAsset service. Represents a row in the &quot;JSONWS_SampleAsset&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.samplejsonws.model.SampleAssetModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SampleAssetImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SampleAssetImpl
 * @see com.liferay.samplejsonws.model.SampleAsset
 * @see com.liferay.samplejsonws.model.SampleAssetModel
 * @generated
 */
@JSON(strict = true)
public class SampleAssetModelImpl extends BaseModelImpl<SampleAsset>
	implements SampleAssetModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sample asset model instance should use the {@link com.liferay.samplejsonws.model.SampleAsset} interface instead.
	 */
	public static final String TABLE_NAME = "JSONWS_SampleAsset";
	public static final Object[][] TABLE_COLUMNS = {
			{ "assetId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "date_", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table JSONWS_SampleAsset (assetId LONG not null primary key,userId LONG,name VARCHAR(75) null,date_ DATE null)";
	public static final String TABLE_SQL_DROP = "drop table JSONWS_SampleAsset";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.samplejsonws.model.SampleAsset"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.samplejsonws.model.SampleAsset"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SampleAsset toModel(SampleAssetSoap soapModel) {
		SampleAsset model = new SampleAssetImpl();

		model.setAssetId(soapModel.getAssetId());
		model.setUserId(soapModel.getUserId());
		model.setName(soapModel.getName());
		model.setDate(soapModel.getDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SampleAsset> toModels(SampleAssetSoap[] soapModels) {
		List<SampleAsset> models = new ArrayList<SampleAsset>(soapModels.length);

		for (SampleAssetSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.samplejsonws.model.SampleAsset"));

	public SampleAssetModelImpl() {
	}

	public long getPrimaryKey() {
		return _assetId;
	}

	public void setPrimaryKey(long primaryKey) {
		setAssetId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_assetId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return SampleAsset.class;
	}

	public String getModelClassName() {
		return SampleAsset.class.getName();
	}

	@JSON
	public long getAssetId() {
		return _assetId;
	}

	public void setAssetId(long assetId) {
		_assetId = assetId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	@JSON
	public Date getDate() {
		return _date;
	}

	public void setDate(Date date) {
		_date = date;
	}

	@Override
	public SampleAsset toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (SampleAsset)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					SampleAsset.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		SampleAssetImpl sampleAssetImpl = new SampleAssetImpl();

		sampleAssetImpl.setAssetId(getAssetId());
		sampleAssetImpl.setUserId(getUserId());
		sampleAssetImpl.setName(getName());
		sampleAssetImpl.setDate(getDate());

		sampleAssetImpl.resetOriginalValues();

		return sampleAssetImpl;
	}

	public int compareTo(SampleAsset sampleAsset) {
		long primaryKey = sampleAsset.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		SampleAsset sampleAsset = null;

		try {
			sampleAsset = (SampleAsset)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = sampleAsset.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<SampleAsset> toCacheModel() {
		SampleAssetCacheModel sampleAssetCacheModel = new SampleAssetCacheModel();

		sampleAssetCacheModel.assetId = getAssetId();

		sampleAssetCacheModel.userId = getUserId();

		sampleAssetCacheModel.name = getName();

		String name = sampleAssetCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			sampleAssetCacheModel.name = null;
		}

		Date date = getDate();

		if (date != null) {
			sampleAssetCacheModel.date = date.getTime();
		}
		else {
			sampleAssetCacheModel.date = Long.MIN_VALUE;
		}

		return sampleAssetCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{assetId=");
		sb.append(getAssetId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", date=");
		sb.append(getDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.liferay.samplejsonws.model.SampleAsset");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>assetId</column-name><column-value><![CDATA[");
		sb.append(getAssetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date</column-name><column-value><![CDATA[");
		sb.append(getDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SampleAsset.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			SampleAsset.class
		};
	private long _assetId;
	private long _userId;
	private String _userUuid;
	private String _name;
	private Date _date;
	private transient ExpandoBridge _expandoBridge;
	private SampleAsset _escapedModelProxy;
}