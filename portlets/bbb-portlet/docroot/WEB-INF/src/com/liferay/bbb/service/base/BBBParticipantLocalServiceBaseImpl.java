/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.bbb.service.base;

import com.liferay.bbb.model.BBBParticipant;
import com.liferay.bbb.service.BBBParticipantLocalService;
import com.liferay.bbb.service.persistence.BBBMeetingPersistence;
import com.liferay.bbb.service.persistence.BBBParticipantPersistence;
import com.liferay.bbb.service.persistence.BBBServerPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.ClassNamePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the b b b participant local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.bbb.service.impl.BBBParticipantLocalServiceImpl}.
 * </p>
 *
 * @author Shinn Lok
 * @see com.liferay.bbb.service.impl.BBBParticipantLocalServiceImpl
 * @see com.liferay.bbb.service.BBBParticipantLocalServiceUtil
 * @generated
 */
public abstract class BBBParticipantLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements BBBParticipantLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.bbb.service.BBBParticipantLocalServiceUtil} to access the b b b participant local service.
	 */

	/**
	 * Adds the b b b participant to the database. Also notifies the appropriate model listeners.
	 *
	 * @param bbbParticipant the b b b participant
	 * @return the b b b participant that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BBBParticipant addBBBParticipant(BBBParticipant bbbParticipant)
		throws SystemException {
		bbbParticipant.setNew(true);

		return bbbParticipantPersistence.update(bbbParticipant);
	}

	/**
	 * Creates a new b b b participant with the primary key. Does not add the b b b participant to the database.
	 *
	 * @param bbbParticipantId the primary key for the new b b b participant
	 * @return the new b b b participant
	 */
	@Override
	public BBBParticipant createBBBParticipant(long bbbParticipantId) {
		return bbbParticipantPersistence.create(bbbParticipantId);
	}

	/**
	 * Deletes the b b b participant with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param bbbParticipantId the primary key of the b b b participant
	 * @return the b b b participant that was removed
	 * @throws PortalException if a b b b participant with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BBBParticipant deleteBBBParticipant(long bbbParticipantId)
		throws PortalException, SystemException {
		return bbbParticipantPersistence.remove(bbbParticipantId);
	}

	/**
	 * Deletes the b b b participant from the database. Also notifies the appropriate model listeners.
	 *
	 * @param bbbParticipant the b b b participant
	 * @return the b b b participant that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BBBParticipant deleteBBBParticipant(BBBParticipant bbbParticipant)
		throws SystemException {
		return bbbParticipantPersistence.remove(bbbParticipant);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(BBBParticipant.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return bbbParticipantPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.bbb.model.impl.BBBParticipantModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return bbbParticipantPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.bbb.model.impl.BBBParticipantModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return bbbParticipantPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return bbbParticipantPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return bbbParticipantPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public BBBParticipant fetchBBBParticipant(long bbbParticipantId)
		throws SystemException {
		return bbbParticipantPersistence.fetchByPrimaryKey(bbbParticipantId);
	}

	/**
	 * Returns the b b b participant with the primary key.
	 *
	 * @param bbbParticipantId the primary key of the b b b participant
	 * @return the b b b participant
	 * @throws PortalException if a b b b participant with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public BBBParticipant getBBBParticipant(long bbbParticipantId)
		throws PortalException, SystemException {
		return bbbParticipantPersistence.findByPrimaryKey(bbbParticipantId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return bbbParticipantPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the b b b participants.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.bbb.model.impl.BBBParticipantModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of b b b participants
	 * @param end the upper bound of the range of b b b participants (not inclusive)
	 * @return the range of b b b participants
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<BBBParticipant> getBBBParticipants(int start, int end)
		throws SystemException {
		return bbbParticipantPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of b b b participants.
	 *
	 * @return the number of b b b participants
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getBBBParticipantsCount() throws SystemException {
		return bbbParticipantPersistence.countAll();
	}

	/**
	 * Updates the b b b participant in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param bbbParticipant the b b b participant
	 * @return the b b b participant that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BBBParticipant updateBBBParticipant(BBBParticipant bbbParticipant)
		throws SystemException {
		return bbbParticipantPersistence.update(bbbParticipant);
	}

	/**
	 * Returns the b b b meeting local service.
	 *
	 * @return the b b b meeting local service
	 */
	public com.liferay.bbb.service.BBBMeetingLocalService getBBBMeetingLocalService() {
		return bbbMeetingLocalService;
	}

	/**
	 * Sets the b b b meeting local service.
	 *
	 * @param bbbMeetingLocalService the b b b meeting local service
	 */
	public void setBBBMeetingLocalService(
		com.liferay.bbb.service.BBBMeetingLocalService bbbMeetingLocalService) {
		this.bbbMeetingLocalService = bbbMeetingLocalService;
	}

	/**
	 * Returns the b b b meeting remote service.
	 *
	 * @return the b b b meeting remote service
	 */
	public com.liferay.bbb.service.BBBMeetingService getBBBMeetingService() {
		return bbbMeetingService;
	}

	/**
	 * Sets the b b b meeting remote service.
	 *
	 * @param bbbMeetingService the b b b meeting remote service
	 */
	public void setBBBMeetingService(
		com.liferay.bbb.service.BBBMeetingService bbbMeetingService) {
		this.bbbMeetingService = bbbMeetingService;
	}

	/**
	 * Returns the b b b meeting persistence.
	 *
	 * @return the b b b meeting persistence
	 */
	public BBBMeetingPersistence getBBBMeetingPersistence() {
		return bbbMeetingPersistence;
	}

	/**
	 * Sets the b b b meeting persistence.
	 *
	 * @param bbbMeetingPersistence the b b b meeting persistence
	 */
	public void setBBBMeetingPersistence(
		BBBMeetingPersistence bbbMeetingPersistence) {
		this.bbbMeetingPersistence = bbbMeetingPersistence;
	}

	/**
	 * Returns the b b b participant local service.
	 *
	 * @return the b b b participant local service
	 */
	public com.liferay.bbb.service.BBBParticipantLocalService getBBBParticipantLocalService() {
		return bbbParticipantLocalService;
	}

	/**
	 * Sets the b b b participant local service.
	 *
	 * @param bbbParticipantLocalService the b b b participant local service
	 */
	public void setBBBParticipantLocalService(
		com.liferay.bbb.service.BBBParticipantLocalService bbbParticipantLocalService) {
		this.bbbParticipantLocalService = bbbParticipantLocalService;
	}

	/**
	 * Returns the b b b participant remote service.
	 *
	 * @return the b b b participant remote service
	 */
	public com.liferay.bbb.service.BBBParticipantService getBBBParticipantService() {
		return bbbParticipantService;
	}

	/**
	 * Sets the b b b participant remote service.
	 *
	 * @param bbbParticipantService the b b b participant remote service
	 */
	public void setBBBParticipantService(
		com.liferay.bbb.service.BBBParticipantService bbbParticipantService) {
		this.bbbParticipantService = bbbParticipantService;
	}

	/**
	 * Returns the b b b participant persistence.
	 *
	 * @return the b b b participant persistence
	 */
	public BBBParticipantPersistence getBBBParticipantPersistence() {
		return bbbParticipantPersistence;
	}

	/**
	 * Sets the b b b participant persistence.
	 *
	 * @param bbbParticipantPersistence the b b b participant persistence
	 */
	public void setBBBParticipantPersistence(
		BBBParticipantPersistence bbbParticipantPersistence) {
		this.bbbParticipantPersistence = bbbParticipantPersistence;
	}

	/**
	 * Returns the b b b server local service.
	 *
	 * @return the b b b server local service
	 */
	public com.liferay.bbb.service.BBBServerLocalService getBBBServerLocalService() {
		return bbbServerLocalService;
	}

	/**
	 * Sets the b b b server local service.
	 *
	 * @param bbbServerLocalService the b b b server local service
	 */
	public void setBBBServerLocalService(
		com.liferay.bbb.service.BBBServerLocalService bbbServerLocalService) {
		this.bbbServerLocalService = bbbServerLocalService;
	}

	/**
	 * Returns the b b b server persistence.
	 *
	 * @return the b b b server persistence
	 */
	public BBBServerPersistence getBBBServerPersistence() {
		return bbbServerPersistence;
	}

	/**
	 * Sets the b b b server persistence.
	 *
	 * @param bbbServerPersistence the b b b server persistence
	 */
	public void setBBBServerPersistence(
		BBBServerPersistence bbbServerPersistence) {
		this.bbbServerPersistence = bbbServerPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name remote service.
	 *
	 * @return the class name remote service
	 */
	public com.liferay.portal.service.ClassNameService getClassNameService() {
		return classNameService;
	}

	/**
	 * Sets the class name remote service.
	 *
	 * @param classNameService the class name remote service
	 */
	public void setClassNameService(
		com.liferay.portal.service.ClassNameService classNameService) {
		this.classNameService = classNameService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.liferay.bbb.model.BBBParticipant",
			bbbParticipantLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.liferay.bbb.model.BBBParticipant");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return BBBParticipant.class;
	}

	protected String getModelClassName() {
		return BBBParticipant.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = bbbParticipantPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.bbb.service.BBBMeetingLocalService.class)
	protected com.liferay.bbb.service.BBBMeetingLocalService bbbMeetingLocalService;
	@BeanReference(type = com.liferay.bbb.service.BBBMeetingService.class)
	protected com.liferay.bbb.service.BBBMeetingService bbbMeetingService;
	@BeanReference(type = BBBMeetingPersistence.class)
	protected BBBMeetingPersistence bbbMeetingPersistence;
	@BeanReference(type = com.liferay.bbb.service.BBBParticipantLocalService.class)
	protected com.liferay.bbb.service.BBBParticipantLocalService bbbParticipantLocalService;
	@BeanReference(type = com.liferay.bbb.service.BBBParticipantService.class)
	protected com.liferay.bbb.service.BBBParticipantService bbbParticipantService;
	@BeanReference(type = BBBParticipantPersistence.class)
	protected BBBParticipantPersistence bbbParticipantPersistence;
	@BeanReference(type = com.liferay.bbb.service.BBBServerLocalService.class)
	protected com.liferay.bbb.service.BBBServerLocalService bbbServerLocalService;
	@BeanReference(type = BBBServerPersistence.class)
	protected BBBServerPersistence bbbServerPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ClassNameLocalService.class)
	protected com.liferay.portal.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = com.liferay.portal.service.ClassNameService.class)
	protected com.liferay.portal.service.ClassNameService classNameService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private BBBParticipantLocalServiceClpInvoker _clpInvoker = new BBBParticipantLocalServiceClpInvoker();
}