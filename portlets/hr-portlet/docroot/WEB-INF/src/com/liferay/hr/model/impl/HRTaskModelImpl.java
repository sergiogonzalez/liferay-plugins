/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.hr.model.impl;

import com.liferay.hr.model.HRTask;
import com.liferay.hr.model.HRTaskModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the HRTask service. Represents a row in the &quot;HRTask&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.hr.model.HRTaskModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HRTaskImpl}.
 * </p>
 *
 * @author Wesley Gong
 * @see HRTaskImpl
 * @see com.liferay.hr.model.HRTask
 * @see com.liferay.hr.model.HRTaskModel
 * @generated
 */
public class HRTaskModelImpl extends BaseModelImpl<HRTask>
	implements HRTaskModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a h r task model instance should use the {@link com.liferay.hr.model.HRTask} interface instead.
	 */
	public static final String TABLE_NAME = "HRTask";
	public static final Object[][] TABLE_COLUMNS = {
			{ "hrTaskId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "hrBillabilityId", Types.BIGINT },
			{ "hrProjectId", Types.BIGINT },
			{ "hrTaskStatusId", Types.BIGINT },
			{ "parentHRTaskId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "estimatedStartDate", Types.TIMESTAMP },
			{ "estimatedEndDate", Types.TIMESTAMP },
			{ "estimatedHours", Types.DOUBLE },
			{ "estimatedHoursCost", Types.DOUBLE },
			{ "estimatedHoursCostCurrencyCode", Types.VARCHAR },
			{ "estimatedExpenses", Types.DOUBLE },
			{ "estimatedExpensesCurrencyCode", Types.VARCHAR },
			{ "actualStartDate", Types.TIMESTAMP },
			{ "actualEndDate", Types.TIMESTAMP },
			{ "actualHours", Types.DOUBLE },
			{ "actualHoursCost", Types.DOUBLE },
			{ "actualHoursCostCurrencyCode", Types.VARCHAR },
			{ "actualExpenses", Types.DOUBLE },
			{ "actualExpensesCurrencyCode", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table HRTask (hrTaskId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,hrBillabilityId LONG,hrProjectId LONG,hrTaskStatusId LONG,parentHRTaskId LONG,name VARCHAR(75) null,description VARCHAR(75) null,estimatedStartDate DATE null,estimatedEndDate DATE null,estimatedHours DOUBLE,estimatedHoursCost DOUBLE,estimatedHoursCostCurrencyCode VARCHAR(75) null,estimatedExpenses DOUBLE,estimatedExpensesCurrencyCode VARCHAR(75) null,actualStartDate DATE null,actualEndDate DATE null,actualHours DOUBLE,actualHoursCost DOUBLE,actualHoursCostCurrencyCode VARCHAR(75) null,actualExpenses DOUBLE,actualExpensesCurrencyCode VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table HRTask";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.hr.model.HRTask"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.hr.model.HRTask"),
			true);

	public Class<?> getModelClass() {
		return HRTask.class;
	}

	public String getModelClassName() {
		return HRTask.class.getName();
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.hr.model.HRTask"));

	public HRTaskModelImpl() {
	}

	public long getPrimaryKey() {
		return _hrTaskId;
	}

	public void setPrimaryKey(long primaryKey) {
		setHrTaskId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_hrTaskId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public long getHrTaskId() {
		return _hrTaskId;
	}

	public void setHrTaskId(long hrTaskId) {
		_hrTaskId = hrTaskId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getHrBillabilityId() {
		return _hrBillabilityId;
	}

	public void setHrBillabilityId(long hrBillabilityId) {
		_hrBillabilityId = hrBillabilityId;
	}

	public long getHrProjectId() {
		return _hrProjectId;
	}

	public void setHrProjectId(long hrProjectId) {
		_hrProjectId = hrProjectId;
	}

	public long getHrTaskStatusId() {
		return _hrTaskStatusId;
	}

	public void setHrTaskStatusId(long hrTaskStatusId) {
		_hrTaskStatusId = hrTaskStatusId;
	}

	public long getParentHRTaskId() {
		return _parentHRTaskId;
	}

	public void setParentHRTaskId(long parentHRTaskId) {
		_parentHRTaskId = parentHRTaskId;
	}

	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	public Date getEstimatedStartDate() {
		return _estimatedStartDate;
	}

	public void setEstimatedStartDate(Date estimatedStartDate) {
		_estimatedStartDate = estimatedStartDate;
	}

	public Date getEstimatedEndDate() {
		return _estimatedEndDate;
	}

	public void setEstimatedEndDate(Date estimatedEndDate) {
		_estimatedEndDate = estimatedEndDate;
	}

	public double getEstimatedHours() {
		return _estimatedHours;
	}

	public void setEstimatedHours(double estimatedHours) {
		_estimatedHours = estimatedHours;
	}

	public double getEstimatedHoursCost() {
		return _estimatedHoursCost;
	}

	public void setEstimatedHoursCost(double estimatedHoursCost) {
		_estimatedHoursCost = estimatedHoursCost;
	}

	public String getEstimatedHoursCostCurrencyCode() {
		if (_estimatedHoursCostCurrencyCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _estimatedHoursCostCurrencyCode;
		}
	}

	public void setEstimatedHoursCostCurrencyCode(
		String estimatedHoursCostCurrencyCode) {
		_estimatedHoursCostCurrencyCode = estimatedHoursCostCurrencyCode;
	}

	public double getEstimatedExpenses() {
		return _estimatedExpenses;
	}

	public void setEstimatedExpenses(double estimatedExpenses) {
		_estimatedExpenses = estimatedExpenses;
	}

	public String getEstimatedExpensesCurrencyCode() {
		if (_estimatedExpensesCurrencyCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _estimatedExpensesCurrencyCode;
		}
	}

	public void setEstimatedExpensesCurrencyCode(
		String estimatedExpensesCurrencyCode) {
		_estimatedExpensesCurrencyCode = estimatedExpensesCurrencyCode;
	}

	public Date getActualStartDate() {
		return _actualStartDate;
	}

	public void setActualStartDate(Date actualStartDate) {
		_actualStartDate = actualStartDate;
	}

	public Date getActualEndDate() {
		return _actualEndDate;
	}

	public void setActualEndDate(Date actualEndDate) {
		_actualEndDate = actualEndDate;
	}

	public double getActualHours() {
		return _actualHours;
	}

	public void setActualHours(double actualHours) {
		_actualHours = actualHours;
	}

	public double getActualHoursCost() {
		return _actualHoursCost;
	}

	public void setActualHoursCost(double actualHoursCost) {
		_actualHoursCost = actualHoursCost;
	}

	public String getActualHoursCostCurrencyCode() {
		if (_actualHoursCostCurrencyCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _actualHoursCostCurrencyCode;
		}
	}

	public void setActualHoursCostCurrencyCode(
		String actualHoursCostCurrencyCode) {
		_actualHoursCostCurrencyCode = actualHoursCostCurrencyCode;
	}

	public double getActualExpenses() {
		return _actualExpenses;
	}

	public void setActualExpenses(double actualExpenses) {
		_actualExpenses = actualExpenses;
	}

	public String getActualExpensesCurrencyCode() {
		if (_actualExpensesCurrencyCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _actualExpensesCurrencyCode;
		}
	}

	public void setActualExpensesCurrencyCode(String actualExpensesCurrencyCode) {
		_actualExpensesCurrencyCode = actualExpensesCurrencyCode;
	}

	@Override
	public HRTask toEscapedModel() {
		if (isEscapedModel()) {
			return (HRTask)this;
		}
		else {
			if (_escapedModelProxy == null) {
				_escapedModelProxy = (HRTask)Proxy.newProxyInstance(_classLoader,
						_escapedModelProxyInterfaces,
						new AutoEscapeBeanHandler(this));
			}

			return _escapedModelProxy;
		}
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					HRTask.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		HRTaskImpl hrTaskImpl = new HRTaskImpl();

		hrTaskImpl.setHrTaskId(getHrTaskId());
		hrTaskImpl.setGroupId(getGroupId());
		hrTaskImpl.setCompanyId(getCompanyId());
		hrTaskImpl.setUserId(getUserId());
		hrTaskImpl.setUserName(getUserName());
		hrTaskImpl.setCreateDate(getCreateDate());
		hrTaskImpl.setModifiedDate(getModifiedDate());
		hrTaskImpl.setHrBillabilityId(getHrBillabilityId());
		hrTaskImpl.setHrProjectId(getHrProjectId());
		hrTaskImpl.setHrTaskStatusId(getHrTaskStatusId());
		hrTaskImpl.setParentHRTaskId(getParentHRTaskId());
		hrTaskImpl.setName(getName());
		hrTaskImpl.setDescription(getDescription());
		hrTaskImpl.setEstimatedStartDate(getEstimatedStartDate());
		hrTaskImpl.setEstimatedEndDate(getEstimatedEndDate());
		hrTaskImpl.setEstimatedHours(getEstimatedHours());
		hrTaskImpl.setEstimatedHoursCost(getEstimatedHoursCost());
		hrTaskImpl.setEstimatedHoursCostCurrencyCode(getEstimatedHoursCostCurrencyCode());
		hrTaskImpl.setEstimatedExpenses(getEstimatedExpenses());
		hrTaskImpl.setEstimatedExpensesCurrencyCode(getEstimatedExpensesCurrencyCode());
		hrTaskImpl.setActualStartDate(getActualStartDate());
		hrTaskImpl.setActualEndDate(getActualEndDate());
		hrTaskImpl.setActualHours(getActualHours());
		hrTaskImpl.setActualHoursCost(getActualHoursCost());
		hrTaskImpl.setActualHoursCostCurrencyCode(getActualHoursCostCurrencyCode());
		hrTaskImpl.setActualExpenses(getActualExpenses());
		hrTaskImpl.setActualExpensesCurrencyCode(getActualExpensesCurrencyCode());

		hrTaskImpl.resetOriginalValues();

		return hrTaskImpl;
	}

	public int compareTo(HRTask hrTask) {
		long primaryKey = hrTask.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		HRTask hrTask = null;

		try {
			hrTask = (HRTask)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = hrTask.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<HRTask> toCacheModel() {
		HRTaskCacheModel hrTaskCacheModel = new HRTaskCacheModel();

		hrTaskCacheModel.hrTaskId = getHrTaskId();

		hrTaskCacheModel.groupId = getGroupId();

		hrTaskCacheModel.companyId = getCompanyId();

		hrTaskCacheModel.userId = getUserId();

		hrTaskCacheModel.userName = getUserName();

		String userName = hrTaskCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			hrTaskCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			hrTaskCacheModel.createDate = createDate.getTime();
		}
		else {
			hrTaskCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			hrTaskCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			hrTaskCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		hrTaskCacheModel.hrBillabilityId = getHrBillabilityId();

		hrTaskCacheModel.hrProjectId = getHrProjectId();

		hrTaskCacheModel.hrTaskStatusId = getHrTaskStatusId();

		hrTaskCacheModel.parentHRTaskId = getParentHRTaskId();

		hrTaskCacheModel.name = getName();

		String name = hrTaskCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			hrTaskCacheModel.name = null;
		}

		hrTaskCacheModel.description = getDescription();

		String description = hrTaskCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			hrTaskCacheModel.description = null;
		}

		Date estimatedStartDate = getEstimatedStartDate();

		if (estimatedStartDate != null) {
			hrTaskCacheModel.estimatedStartDate = estimatedStartDate.getTime();
		}
		else {
			hrTaskCacheModel.estimatedStartDate = Long.MIN_VALUE;
		}

		Date estimatedEndDate = getEstimatedEndDate();

		if (estimatedEndDate != null) {
			hrTaskCacheModel.estimatedEndDate = estimatedEndDate.getTime();
		}
		else {
			hrTaskCacheModel.estimatedEndDate = Long.MIN_VALUE;
		}

		hrTaskCacheModel.estimatedHours = getEstimatedHours();

		hrTaskCacheModel.estimatedHoursCost = getEstimatedHoursCost();

		hrTaskCacheModel.estimatedHoursCostCurrencyCode = getEstimatedHoursCostCurrencyCode();

		String estimatedHoursCostCurrencyCode = hrTaskCacheModel.estimatedHoursCostCurrencyCode;

		if ((estimatedHoursCostCurrencyCode != null) &&
				(estimatedHoursCostCurrencyCode.length() == 0)) {
			hrTaskCacheModel.estimatedHoursCostCurrencyCode = null;
		}

		hrTaskCacheModel.estimatedExpenses = getEstimatedExpenses();

		hrTaskCacheModel.estimatedExpensesCurrencyCode = getEstimatedExpensesCurrencyCode();

		String estimatedExpensesCurrencyCode = hrTaskCacheModel.estimatedExpensesCurrencyCode;

		if ((estimatedExpensesCurrencyCode != null) &&
				(estimatedExpensesCurrencyCode.length() == 0)) {
			hrTaskCacheModel.estimatedExpensesCurrencyCode = null;
		}

		Date actualStartDate = getActualStartDate();

		if (actualStartDate != null) {
			hrTaskCacheModel.actualStartDate = actualStartDate.getTime();
		}
		else {
			hrTaskCacheModel.actualStartDate = Long.MIN_VALUE;
		}

		Date actualEndDate = getActualEndDate();

		if (actualEndDate != null) {
			hrTaskCacheModel.actualEndDate = actualEndDate.getTime();
		}
		else {
			hrTaskCacheModel.actualEndDate = Long.MIN_VALUE;
		}

		hrTaskCacheModel.actualHours = getActualHours();

		hrTaskCacheModel.actualHoursCost = getActualHoursCost();

		hrTaskCacheModel.actualHoursCostCurrencyCode = getActualHoursCostCurrencyCode();

		String actualHoursCostCurrencyCode = hrTaskCacheModel.actualHoursCostCurrencyCode;

		if ((actualHoursCostCurrencyCode != null) &&
				(actualHoursCostCurrencyCode.length() == 0)) {
			hrTaskCacheModel.actualHoursCostCurrencyCode = null;
		}

		hrTaskCacheModel.actualExpenses = getActualExpenses();

		hrTaskCacheModel.actualExpensesCurrencyCode = getActualExpensesCurrencyCode();

		String actualExpensesCurrencyCode = hrTaskCacheModel.actualExpensesCurrencyCode;

		if ((actualExpensesCurrencyCode != null) &&
				(actualExpensesCurrencyCode.length() == 0)) {
			hrTaskCacheModel.actualExpensesCurrencyCode = null;
		}

		return hrTaskCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(55);

		sb.append("{hrTaskId=");
		sb.append(getHrTaskId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", hrBillabilityId=");
		sb.append(getHrBillabilityId());
		sb.append(", hrProjectId=");
		sb.append(getHrProjectId());
		sb.append(", hrTaskStatusId=");
		sb.append(getHrTaskStatusId());
		sb.append(", parentHRTaskId=");
		sb.append(getParentHRTaskId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", estimatedStartDate=");
		sb.append(getEstimatedStartDate());
		sb.append(", estimatedEndDate=");
		sb.append(getEstimatedEndDate());
		sb.append(", estimatedHours=");
		sb.append(getEstimatedHours());
		sb.append(", estimatedHoursCost=");
		sb.append(getEstimatedHoursCost());
		sb.append(", estimatedHoursCostCurrencyCode=");
		sb.append(getEstimatedHoursCostCurrencyCode());
		sb.append(", estimatedExpenses=");
		sb.append(getEstimatedExpenses());
		sb.append(", estimatedExpensesCurrencyCode=");
		sb.append(getEstimatedExpensesCurrencyCode());
		sb.append(", actualStartDate=");
		sb.append(getActualStartDate());
		sb.append(", actualEndDate=");
		sb.append(getActualEndDate());
		sb.append(", actualHours=");
		sb.append(getActualHours());
		sb.append(", actualHoursCost=");
		sb.append(getActualHoursCost());
		sb.append(", actualHoursCostCurrencyCode=");
		sb.append(getActualHoursCostCurrencyCode());
		sb.append(", actualExpenses=");
		sb.append(getActualExpenses());
		sb.append(", actualExpensesCurrencyCode=");
		sb.append(getActualExpensesCurrencyCode());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(85);

		sb.append("<model><model-name>");
		sb.append("com.liferay.hr.model.HRTask");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>hrTaskId</column-name><column-value><![CDATA[");
		sb.append(getHrTaskId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hrBillabilityId</column-name><column-value><![CDATA[");
		sb.append(getHrBillabilityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hrProjectId</column-name><column-value><![CDATA[");
		sb.append(getHrProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hrTaskStatusId</column-name><column-value><![CDATA[");
		sb.append(getHrTaskStatusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentHRTaskId</column-name><column-value><![CDATA[");
		sb.append(getParentHRTaskId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>estimatedStartDate</column-name><column-value><![CDATA[");
		sb.append(getEstimatedStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>estimatedEndDate</column-name><column-value><![CDATA[");
		sb.append(getEstimatedEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>estimatedHours</column-name><column-value><![CDATA[");
		sb.append(getEstimatedHours());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>estimatedHoursCost</column-name><column-value><![CDATA[");
		sb.append(getEstimatedHoursCost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>estimatedHoursCostCurrencyCode</column-name><column-value><![CDATA[");
		sb.append(getEstimatedHoursCostCurrencyCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>estimatedExpenses</column-name><column-value><![CDATA[");
		sb.append(getEstimatedExpenses());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>estimatedExpensesCurrencyCode</column-name><column-value><![CDATA[");
		sb.append(getEstimatedExpensesCurrencyCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualStartDate</column-name><column-value><![CDATA[");
		sb.append(getActualStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualEndDate</column-name><column-value><![CDATA[");
		sb.append(getActualEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualHours</column-name><column-value><![CDATA[");
		sb.append(getActualHours());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualHoursCost</column-name><column-value><![CDATA[");
		sb.append(getActualHoursCost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualHoursCostCurrencyCode</column-name><column-value><![CDATA[");
		sb.append(getActualHoursCostCurrencyCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualExpenses</column-name><column-value><![CDATA[");
		sb.append(getActualExpenses());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualExpensesCurrencyCode</column-name><column-value><![CDATA[");
		sb.append(getActualExpensesCurrencyCode());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = HRTask.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			HRTask.class
		};
	private long _hrTaskId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _hrBillabilityId;
	private long _hrProjectId;
	private long _hrTaskStatusId;
	private long _parentHRTaskId;
	private String _name;
	private String _description;
	private Date _estimatedStartDate;
	private Date _estimatedEndDate;
	private double _estimatedHours;
	private double _estimatedHoursCost;
	private String _estimatedHoursCostCurrencyCode;
	private double _estimatedExpenses;
	private String _estimatedExpensesCurrencyCode;
	private Date _actualStartDate;
	private Date _actualEndDate;
	private double _actualHours;
	private double _actualHoursCost;
	private String _actualHoursCostCurrencyCode;
	private double _actualExpenses;
	private String _actualExpensesCurrencyCode;
	private transient ExpandoBridge _expandoBridge;
	private HRTask _escapedModelProxy;
}