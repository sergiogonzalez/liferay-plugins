/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.hr.model.impl;

import com.liferay.hr.model.HRExpenseCurrencyConversion;
import com.liferay.hr.model.HRExpenseCurrencyConversionModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the HRExpenseCurrencyConversion service. Represents a row in the &quot;HRExpenseCurrencyConversion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.hr.model.HRExpenseCurrencyConversionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HRExpenseCurrencyConversionImpl}.
 * </p>
 *
 * @author Wesley Gong
 * @see HRExpenseCurrencyConversionImpl
 * @see com.liferay.hr.model.HRExpenseCurrencyConversion
 * @see com.liferay.hr.model.HRExpenseCurrencyConversionModel
 * @generated
 */
public class HRExpenseCurrencyConversionModelImpl extends BaseModelImpl<HRExpenseCurrencyConversion>
	implements HRExpenseCurrencyConversionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a h r expense currency conversion model instance should use the {@link com.liferay.hr.model.HRExpenseCurrencyConversion} interface instead.
	 */
	public static final String TABLE_NAME = "HRExpenseCurrencyConversion";
	public static final Object[][] TABLE_COLUMNS = {
			{ "hrExpenseCurrencyConversionId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "fromHRExpenseCurrencyId", Types.BIGINT },
			{ "toHRExpenseCurrencyId", Types.BIGINT },
			{ "conversionDate", Types.TIMESTAMP },
			{ "conversionValue", Types.DOUBLE }
		};
	public static final String TABLE_SQL_CREATE = "create table HRExpenseCurrencyConversion (hrExpenseCurrencyConversionId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,fromHRExpenseCurrencyId LONG,toHRExpenseCurrencyId LONG,conversionDate DATE null,conversionValue DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table HRExpenseCurrencyConversion";
	public static final String ORDER_BY_JPQL = " ORDER BY hrExpenseCurrencyConversion.conversionDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY HRExpenseCurrencyConversion.conversionDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.hr.model.HRExpenseCurrencyConversion"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.hr.model.HRExpenseCurrencyConversion"),
			true);

	public Class<?> getModelClass() {
		return HRExpenseCurrencyConversion.class;
	}

	public String getModelClassName() {
		return HRExpenseCurrencyConversion.class.getName();
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.hr.model.HRExpenseCurrencyConversion"));

	public HRExpenseCurrencyConversionModelImpl() {
	}

	public long getPrimaryKey() {
		return _hrExpenseCurrencyConversionId;
	}

	public void setPrimaryKey(long primaryKey) {
		setHrExpenseCurrencyConversionId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_hrExpenseCurrencyConversionId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public long getHrExpenseCurrencyConversionId() {
		return _hrExpenseCurrencyConversionId;
	}

	public void setHrExpenseCurrencyConversionId(
		long hrExpenseCurrencyConversionId) {
		_hrExpenseCurrencyConversionId = hrExpenseCurrencyConversionId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getFromHRExpenseCurrencyId() {
		return _fromHRExpenseCurrencyId;
	}

	public void setFromHRExpenseCurrencyId(long fromHRExpenseCurrencyId) {
		if (!_setOriginalFromHRExpenseCurrencyId) {
			_setOriginalFromHRExpenseCurrencyId = true;

			_originalFromHRExpenseCurrencyId = _fromHRExpenseCurrencyId;
		}

		_fromHRExpenseCurrencyId = fromHRExpenseCurrencyId;
	}

	public long getOriginalFromHRExpenseCurrencyId() {
		return _originalFromHRExpenseCurrencyId;
	}

	public long getToHRExpenseCurrencyId() {
		return _toHRExpenseCurrencyId;
	}

	public void setToHRExpenseCurrencyId(long toHRExpenseCurrencyId) {
		if (!_setOriginalToHRExpenseCurrencyId) {
			_setOriginalToHRExpenseCurrencyId = true;

			_originalToHRExpenseCurrencyId = _toHRExpenseCurrencyId;
		}

		_toHRExpenseCurrencyId = toHRExpenseCurrencyId;
	}

	public long getOriginalToHRExpenseCurrencyId() {
		return _originalToHRExpenseCurrencyId;
	}

	public Date getConversionDate() {
		return _conversionDate;
	}

	public void setConversionDate(Date conversionDate) {
		if (_originalConversionDate == null) {
			_originalConversionDate = _conversionDate;
		}

		_conversionDate = conversionDate;
	}

	public Date getOriginalConversionDate() {
		return _originalConversionDate;
	}

	public double getConversionValue() {
		return _conversionValue;
	}

	public void setConversionValue(double conversionValue) {
		_conversionValue = conversionValue;
	}

	@Override
	public HRExpenseCurrencyConversion toEscapedModel() {
		if (isEscapedModel()) {
			return (HRExpenseCurrencyConversion)this;
		}
		else {
			if (_escapedModelProxy == null) {
				_escapedModelProxy = (HRExpenseCurrencyConversion)Proxy.newProxyInstance(_classLoader,
						_escapedModelProxyInterfaces,
						new AutoEscapeBeanHandler(this));
			}

			return _escapedModelProxy;
		}
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					HRExpenseCurrencyConversion.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		HRExpenseCurrencyConversionImpl hrExpenseCurrencyConversionImpl = new HRExpenseCurrencyConversionImpl();

		hrExpenseCurrencyConversionImpl.setHrExpenseCurrencyConversionId(getHrExpenseCurrencyConversionId());
		hrExpenseCurrencyConversionImpl.setGroupId(getGroupId());
		hrExpenseCurrencyConversionImpl.setCompanyId(getCompanyId());
		hrExpenseCurrencyConversionImpl.setUserId(getUserId());
		hrExpenseCurrencyConversionImpl.setUserName(getUserName());
		hrExpenseCurrencyConversionImpl.setCreateDate(getCreateDate());
		hrExpenseCurrencyConversionImpl.setModifiedDate(getModifiedDate());
		hrExpenseCurrencyConversionImpl.setFromHRExpenseCurrencyId(getFromHRExpenseCurrencyId());
		hrExpenseCurrencyConversionImpl.setToHRExpenseCurrencyId(getToHRExpenseCurrencyId());
		hrExpenseCurrencyConversionImpl.setConversionDate(getConversionDate());
		hrExpenseCurrencyConversionImpl.setConversionValue(getConversionValue());

		hrExpenseCurrencyConversionImpl.resetOriginalValues();

		return hrExpenseCurrencyConversionImpl;
	}

	public int compareTo(
		HRExpenseCurrencyConversion hrExpenseCurrencyConversion) {
		int value = 0;

		value = DateUtil.compareTo(getConversionDate(),
				hrExpenseCurrencyConversion.getConversionDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		HRExpenseCurrencyConversion hrExpenseCurrencyConversion = null;

		try {
			hrExpenseCurrencyConversion = (HRExpenseCurrencyConversion)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = hrExpenseCurrencyConversion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		HRExpenseCurrencyConversionModelImpl hrExpenseCurrencyConversionModelImpl =
			this;

		hrExpenseCurrencyConversionModelImpl._originalGroupId = hrExpenseCurrencyConversionModelImpl._groupId;

		hrExpenseCurrencyConversionModelImpl._setOriginalGroupId = false;

		hrExpenseCurrencyConversionModelImpl._originalFromHRExpenseCurrencyId = hrExpenseCurrencyConversionModelImpl._fromHRExpenseCurrencyId;

		hrExpenseCurrencyConversionModelImpl._setOriginalFromHRExpenseCurrencyId = false;

		hrExpenseCurrencyConversionModelImpl._originalToHRExpenseCurrencyId = hrExpenseCurrencyConversionModelImpl._toHRExpenseCurrencyId;

		hrExpenseCurrencyConversionModelImpl._setOriginalToHRExpenseCurrencyId = false;

		hrExpenseCurrencyConversionModelImpl._originalConversionDate = hrExpenseCurrencyConversionModelImpl._conversionDate;
	}

	@Override
	public CacheModel<HRExpenseCurrencyConversion> toCacheModel() {
		HRExpenseCurrencyConversionCacheModel hrExpenseCurrencyConversionCacheModel =
			new HRExpenseCurrencyConversionCacheModel();

		hrExpenseCurrencyConversionCacheModel.hrExpenseCurrencyConversionId = getHrExpenseCurrencyConversionId();

		hrExpenseCurrencyConversionCacheModel.groupId = getGroupId();

		hrExpenseCurrencyConversionCacheModel.companyId = getCompanyId();

		hrExpenseCurrencyConversionCacheModel.userId = getUserId();

		hrExpenseCurrencyConversionCacheModel.userName = getUserName();

		String userName = hrExpenseCurrencyConversionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			hrExpenseCurrencyConversionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			hrExpenseCurrencyConversionCacheModel.createDate = createDate.getTime();
		}
		else {
			hrExpenseCurrencyConversionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			hrExpenseCurrencyConversionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			hrExpenseCurrencyConversionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		hrExpenseCurrencyConversionCacheModel.fromHRExpenseCurrencyId = getFromHRExpenseCurrencyId();

		hrExpenseCurrencyConversionCacheModel.toHRExpenseCurrencyId = getToHRExpenseCurrencyId();

		Date conversionDate = getConversionDate();

		if (conversionDate != null) {
			hrExpenseCurrencyConversionCacheModel.conversionDate = conversionDate.getTime();
		}
		else {
			hrExpenseCurrencyConversionCacheModel.conversionDate = Long.MIN_VALUE;
		}

		hrExpenseCurrencyConversionCacheModel.conversionValue = getConversionValue();

		return hrExpenseCurrencyConversionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{hrExpenseCurrencyConversionId=");
		sb.append(getHrExpenseCurrencyConversionId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", fromHRExpenseCurrencyId=");
		sb.append(getFromHRExpenseCurrencyId());
		sb.append(", toHRExpenseCurrencyId=");
		sb.append(getToHRExpenseCurrencyId());
		sb.append(", conversionDate=");
		sb.append(getConversionDate());
		sb.append(", conversionValue=");
		sb.append(getConversionValue());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.liferay.hr.model.HRExpenseCurrencyConversion");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>hrExpenseCurrencyConversionId</column-name><column-value><![CDATA[");
		sb.append(getHrExpenseCurrencyConversionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromHRExpenseCurrencyId</column-name><column-value><![CDATA[");
		sb.append(getFromHRExpenseCurrencyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toHRExpenseCurrencyId</column-name><column-value><![CDATA[");
		sb.append(getToHRExpenseCurrencyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>conversionDate</column-name><column-value><![CDATA[");
		sb.append(getConversionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>conversionValue</column-name><column-value><![CDATA[");
		sb.append(getConversionValue());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = HRExpenseCurrencyConversion.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			HRExpenseCurrencyConversion.class
		};
	private long _hrExpenseCurrencyConversionId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _fromHRExpenseCurrencyId;
	private long _originalFromHRExpenseCurrencyId;
	private boolean _setOriginalFromHRExpenseCurrencyId;
	private long _toHRExpenseCurrencyId;
	private long _originalToHRExpenseCurrencyId;
	private boolean _setOriginalToHRExpenseCurrencyId;
	private Date _conversionDate;
	private Date _originalConversionDate;
	private double _conversionValue;
	private transient ExpandoBridge _expandoBridge;
	private HRExpenseCurrencyConversion _escapedModelProxy;
}