/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.hr.model.impl;

import com.liferay.hr.model.HRTimeOff;
import com.liferay.hr.model.HRTimeOffModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the HRTimeOff service. Represents a row in the &quot;HRTimeOff&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.hr.model.HRTimeOffModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HRTimeOffImpl}.
 * </p>
 *
 * @author Wesley Gong
 * @see HRTimeOffImpl
 * @see com.liferay.hr.model.HRTimeOff
 * @see com.liferay.hr.model.HRTimeOffModel
 * @generated
 */
public class HRTimeOffModelImpl extends BaseModelImpl<HRTimeOff>
	implements HRTimeOffModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a h r time off model instance should use the {@link com.liferay.hr.model.HRTimeOff} interface instead.
	 */
	public static final String TABLE_NAME = "HRTimeOff";
	public static final Object[][] TABLE_COLUMNS = {
			{ "hrTimeOffId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "hrTimeOffTypeId", Types.BIGINT },
			{ "hrTimeSheetId", Types.BIGINT },
			{ "hrUserId", Types.BIGINT },
			{ "startDayOfYear", Types.INTEGER },
			{ "endDayOfYear", Types.INTEGER },
			{ "year", Types.INTEGER },
			{ "totalHours", Types.DOUBLE },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table HRTimeOff (hrTimeOffId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,hrTimeOffTypeId LONG,hrTimeSheetId LONG,hrUserId LONG,startDayOfYear INTEGER,endDayOfYear INTEGER,year INTEGER,totalHours DOUBLE,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table HRTimeOff";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.hr.model.HRTimeOff"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.hr.model.HRTimeOff"),
			true);

	public Class<?> getModelClass() {
		return HRTimeOff.class;
	}

	public String getModelClassName() {
		return HRTimeOff.class.getName();
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.hr.model.HRTimeOff"));

	public HRTimeOffModelImpl() {
	}

	public long getPrimaryKey() {
		return _hrTimeOffId;
	}

	public void setPrimaryKey(long primaryKey) {
		setHrTimeOffId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_hrTimeOffId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public long getHrTimeOffId() {
		return _hrTimeOffId;
	}

	public void setHrTimeOffId(long hrTimeOffId) {
		_hrTimeOffId = hrTimeOffId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getHrTimeOffTypeId() {
		return _hrTimeOffTypeId;
	}

	public void setHrTimeOffTypeId(long hrTimeOffTypeId) {
		_hrTimeOffTypeId = hrTimeOffTypeId;
	}

	public long getHrTimeSheetId() {
		return _hrTimeSheetId;
	}

	public void setHrTimeSheetId(long hrTimeSheetId) {
		_hrTimeSheetId = hrTimeSheetId;
	}

	public long getHrUserId() {
		return _hrUserId;
	}

	public void setHrUserId(long hrUserId) {
		_hrUserId = hrUserId;
	}

	public String getHrUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getHrUserId(), "uuid", _hrUserUuid);
	}

	public void setHrUserUuid(String hrUserUuid) {
		_hrUserUuid = hrUserUuid;
	}

	public int getStartDayOfYear() {
		return _startDayOfYear;
	}

	public void setStartDayOfYear(int startDayOfYear) {
		_startDayOfYear = startDayOfYear;
	}

	public int getEndDayOfYear() {
		return _endDayOfYear;
	}

	public void setEndDayOfYear(int endDayOfYear) {
		_endDayOfYear = endDayOfYear;
	}

	public int getYear() {
		return _year;
	}

	public void setYear(int year) {
		_year = year;
	}

	public double getTotalHours() {
		return _totalHours;
	}

	public void setTotalHours(double totalHours) {
		_totalHours = totalHours;
	}

	public int getStatus() {
		return _status;
	}

	public void setStatus(int status) {
		_status = status;
	}

	public long getStatusByUserId() {
		return _statusByUserId;
	}

	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	public Date getStatusDate() {
		return _statusDate;
	}

	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	/**
	 * @deprecated {@link #isApproved}
	 */
	public boolean getApproved() {
		return isApproved();
	}

	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public HRTimeOff toEscapedModel() {
		if (isEscapedModel()) {
			return (HRTimeOff)this;
		}
		else {
			if (_escapedModelProxy == null) {
				_escapedModelProxy = (HRTimeOff)Proxy.newProxyInstance(_classLoader,
						_escapedModelProxyInterfaces,
						new AutoEscapeBeanHandler(this));
			}

			return _escapedModelProxy;
		}
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					HRTimeOff.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		HRTimeOffImpl hrTimeOffImpl = new HRTimeOffImpl();

		hrTimeOffImpl.setHrTimeOffId(getHrTimeOffId());
		hrTimeOffImpl.setGroupId(getGroupId());
		hrTimeOffImpl.setCompanyId(getCompanyId());
		hrTimeOffImpl.setUserId(getUserId());
		hrTimeOffImpl.setUserName(getUserName());
		hrTimeOffImpl.setCreateDate(getCreateDate());
		hrTimeOffImpl.setModifiedDate(getModifiedDate());
		hrTimeOffImpl.setHrTimeOffTypeId(getHrTimeOffTypeId());
		hrTimeOffImpl.setHrTimeSheetId(getHrTimeSheetId());
		hrTimeOffImpl.setHrUserId(getHrUserId());
		hrTimeOffImpl.setStartDayOfYear(getStartDayOfYear());
		hrTimeOffImpl.setEndDayOfYear(getEndDayOfYear());
		hrTimeOffImpl.setYear(getYear());
		hrTimeOffImpl.setTotalHours(getTotalHours());
		hrTimeOffImpl.setStatus(getStatus());
		hrTimeOffImpl.setStatusByUserId(getStatusByUserId());
		hrTimeOffImpl.setStatusByUserName(getStatusByUserName());
		hrTimeOffImpl.setStatusDate(getStatusDate());

		hrTimeOffImpl.resetOriginalValues();

		return hrTimeOffImpl;
	}

	public int compareTo(HRTimeOff hrTimeOff) {
		long primaryKey = hrTimeOff.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		HRTimeOff hrTimeOff = null;

		try {
			hrTimeOff = (HRTimeOff)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = hrTimeOff.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<HRTimeOff> toCacheModel() {
		HRTimeOffCacheModel hrTimeOffCacheModel = new HRTimeOffCacheModel();

		hrTimeOffCacheModel.hrTimeOffId = getHrTimeOffId();

		hrTimeOffCacheModel.groupId = getGroupId();

		hrTimeOffCacheModel.companyId = getCompanyId();

		hrTimeOffCacheModel.userId = getUserId();

		hrTimeOffCacheModel.userName = getUserName();

		String userName = hrTimeOffCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			hrTimeOffCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			hrTimeOffCacheModel.createDate = createDate.getTime();
		}
		else {
			hrTimeOffCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			hrTimeOffCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			hrTimeOffCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		hrTimeOffCacheModel.hrTimeOffTypeId = getHrTimeOffTypeId();

		hrTimeOffCacheModel.hrTimeSheetId = getHrTimeSheetId();

		hrTimeOffCacheModel.hrUserId = getHrUserId();

		hrTimeOffCacheModel.startDayOfYear = getStartDayOfYear();

		hrTimeOffCacheModel.endDayOfYear = getEndDayOfYear();

		hrTimeOffCacheModel.year = getYear();

		hrTimeOffCacheModel.totalHours = getTotalHours();

		hrTimeOffCacheModel.status = getStatus();

		hrTimeOffCacheModel.statusByUserId = getStatusByUserId();

		hrTimeOffCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = hrTimeOffCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			hrTimeOffCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			hrTimeOffCacheModel.statusDate = statusDate.getTime();
		}
		else {
			hrTimeOffCacheModel.statusDate = Long.MIN_VALUE;
		}

		return hrTimeOffCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{hrTimeOffId=");
		sb.append(getHrTimeOffId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", hrTimeOffTypeId=");
		sb.append(getHrTimeOffTypeId());
		sb.append(", hrTimeSheetId=");
		sb.append(getHrTimeSheetId());
		sb.append(", hrUserId=");
		sb.append(getHrUserId());
		sb.append(", startDayOfYear=");
		sb.append(getStartDayOfYear());
		sb.append(", endDayOfYear=");
		sb.append(getEndDayOfYear());
		sb.append(", year=");
		sb.append(getYear());
		sb.append(", totalHours=");
		sb.append(getTotalHours());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("com.liferay.hr.model.HRTimeOff");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>hrTimeOffId</column-name><column-value><![CDATA[");
		sb.append(getHrTimeOffId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hrTimeOffTypeId</column-name><column-value><![CDATA[");
		sb.append(getHrTimeOffTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hrTimeSheetId</column-name><column-value><![CDATA[");
		sb.append(getHrTimeSheetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hrUserId</column-name><column-value><![CDATA[");
		sb.append(getHrUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDayOfYear</column-name><column-value><![CDATA[");
		sb.append(getStartDayOfYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDayOfYear</column-name><column-value><![CDATA[");
		sb.append(getEndDayOfYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>year</column-name><column-value><![CDATA[");
		sb.append(getYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalHours</column-name><column-value><![CDATA[");
		sb.append(getTotalHours());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = HRTimeOff.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			HRTimeOff.class
		};
	private long _hrTimeOffId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _hrTimeOffTypeId;
	private long _hrTimeSheetId;
	private long _hrUserId;
	private String _hrUserUuid;
	private int _startDayOfYear;
	private int _endDayOfYear;
	private int _year;
	private double _totalHours;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private Date _statusDate;
	private transient ExpandoBridge _expandoBridge;
	private HRTimeOff _escapedModelProxy;
}